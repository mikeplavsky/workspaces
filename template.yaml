Description:  >-
  **WARNING** This template creates AWS VPC NAT Gateway.
  You will be billed for the AWS resources used if you create a stack from this template.

Parameters:
  Tag:
    Description: We tag all AWS resources for your convinience.
    Type: String

  DirectoryId:
    Description: Provide existing AWS Directory Service Id.
    Type: String

  PrivateSubnets:
    Description: Choose which private subnets we should deployed to.
    Type: List<AWS::EC2::Subnet::Id>

  BundledId:
    Description: >
      Amazon WorkSpace Bundle Id.
      aws workspaces describe-workspace-bundles --owner AMAZON --query "Bundles[?Name=='Standard with Amazon Linux 2']".
    Type: String

Resources:
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute

  CustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt CustomResourceRole.Arn
      Runtime: nodejs12.x
      Code:
        ZipFile: !Sub |
          'use strict';
          const AWS   = require('aws-sdk');
          const workspaces = new AWS.WorkSpaces();
          const https = require("https");
          const url = require("url");
          exports.handler = async (event) => {
            console.log(JSON.stringify(event));
            const { DirectoryId, SubnetIds } = event.ResourceProperties;

            if (event.RequestType === 'Create') {
              await workspaces.registerWorkspaceDirectory({
                DirectoryId,
                SubnetIds,
                EnableWorkDocs: false
              }).promise()

              return new Promise((resolve, reject) => {
                const responseBody = JSON.stringify({
                  Status: 'SUCCESS',
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  NoEcho: false,
                  Data: {}
                });

                const parsedUrl = url.parse(event.ResponseURL);
                const options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: {
                    "content-type": "",
                    "content-length": responseBody.length
                  }
                };

                const request = https.request(options, (response) => {
                  console.log("Status code: " + response.statusCode);
                  console.log("Status message: " + response.statusMessage);
                  resolve(response);
                });

                request.on('error', (err) => {
                  console.log({ err });
                  reject(err);
                });

                request.write(responseBody);
                request.end();
              }).catch(err => {
                console.log(err);
                throw err;
              });
            }
          };

  EnableWorkSpaces:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      DirectoryId: !Ref DirectoryId
      SubnetIds:  # we need only 2 subnets (even if more provided)
        - !Select [ 0, !Ref PrivateSubnets ]
        - !Select [ 1, !Ref PrivateSubnets ]

  Workspaces:
    Type: AWS::WorkSpaces::Workspace
    DependsOn: EnableWorkSpaces
    Properties:
      BundleId: !Ref BundledId
      DirectoryId: !Ref DirectoryId
      UserName: String
      WorkspaceProperties:
        ComputeTypeName: STANDARD
        RunningMode: AUTO_STOP
        RunningModeAutoStopTimeoutInMinutes: 60
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Ref Tag
