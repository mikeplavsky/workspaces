Description:  >-
  **WARNING** This template creates AWS VPC NAT Gateway.
  You will be billed for the AWS resources used if you create a stack from this template.

Parameters:
  Tag:
    Description: We tag all AWS resources for your convinience.
    Type: String

  DirectoryId:
    Description: Provide existing AWS Directory Service Id.
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Ref Tag

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Ref Tag

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.192.10.0/24
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Sub ${Tag}/public/A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.192.20.0/24
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Sub ${Tag}/public/B

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.192.30.0/24
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Sub ${Tag}/public/C

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 10.192.40.0/24
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Sub ${Tag}/private/A

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.192.50.0/24
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Sub ${Tag}/private/B

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: 10.192.60.0/24
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Sub ${Tag}/private/C

  EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Ref Tag

  # Important: We are sharing single NAT gateway accross all provate subnets to reduce costs
  # https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html
  # Note: If you have resources in multiple Availability Zones and they share one NAT gateway, and if the NAT gatewayâ€™s Availability Zone is down,
  # resources in the other Availability Zones lose internet access.
  # To create an Availability Zone-independent architecture,
  # create a NAT gateway in each Availability Zone and configure your routing to ensure that resources use the NAT gateway in the same Availability Zone.
  NAT:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Ref Tag

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Sub ${Tag}/public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Sub ${Tag}/private

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC

Outputs:
  VPC:
    Value: !Ref VPC

  PublicSubnets:
    Value: !Sub ${PublicSubnetA},${PublicSubnetB},${PublicSubnetC}

  PrivateSubnets:
    Value: !Sub ${PrivateSubnetA},${PrivateSubnetB},${PrivateSubnetC}
